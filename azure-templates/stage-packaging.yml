stages:
- stage: Packages
  jobs:
  - job: Packaging pypi
    strategy:
      matrix:
        linuxPackagingPY37:
          imageName: 'ubuntu-latest'
          python.version: '3.7'
          tox.env: packaging
        linuxPackagingPY38:
          imageName: 'ubuntu-latest'
          python.version: '3.8'
          tox.env: packaging
        linuxPackagingPY39:
          imageName: 'ubuntu-latest'
          python.version: '3.9'
          tox.env: packaging

        macPackagingPY37:
          imageName: 'macOs-latest'
          python.version: '3.7'
          tox.env: packaging
        macPackagingPY38:
          imageName: 'macOs-latest'
          python.version: '3.8'
          tox.env: packaging
        macPackagingPY39:
          imageName: 'macOs-latest'
          python.version: '3.9'
          tox.env: packaging

        windowsPackagingPY37:
          imageName: 'windows-latest'
          python.version: '3.7'
          tox.env: packaging
        windowsPackagingPY38:
          imageName: 'windows-latest'
          python.version: '3.8'
          tox.env: packaging
        windowsPackagingPY39:
          imageName: 'windows-latest'
          python.version: '3.9'
          tox.env: packaging

    pool:
      vmImage: $(imageName)
    steps:
    - task: TwineAuthenticate@1
      displayName: 'Authenticate with Pypi'
      condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
      inputs:
        pythonUploadServiceConnection: ImageToScanConnectionPyPI

    - script: python -m pip install --upgrade --quiet setuptools wheel twine

    - script: python setup.py bdist_wheel

    - script: python -m twine check "dist/*"

    - script: python -m twine upload -r PyPIConnection --config-file $(PYPIRC_PATH) --skip-existing "dist/*"
      condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')

  - job: Packaging Pyinstaller
    strategy:
      matrix:
        linuxPackaging:
          imageName: 'ubuntu-latest'
          python.version: '3.9'
          tox.env: packaging
        macPackaging:
          imageName: 'macOS-latest'
          python.version: '3.9'
          tox.env: packaging
        windowsPackaging:
          imageName: 'windows-latest'
          python.version: '3.9'
          tox.env: packaging
    pool:
      vmImage: $(imageName)
    steps:
    - template: python-steps.yml
      parameters:
        toxEnv: $(tox.env) -- -o dist/image-to-scan

    - publish: $(System.DefaultWorkingDirectory)/dist/image-to-scan
      condition: and(
                  succeeded(),
                  eq(variables['Build.SourceBranch'], 'refs/heads/master')
                 )
      artifact: image-to-scan-$(imageName)

    - task: GithubRelease@0
      displayName: 'Create GitHub Release'
      condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
      inputs:
        gitHubConnection: image-to-scan
        assets: $(System.DefaultWorkingDirectory)/dist/image-to-scan

stages:
- stage: Packages
  jobs:
  - job: wheel_and_sdist
    strategy:
      matrix:
        PY3:
          imageName: 'ubuntu-latest'
          python.version: '3.9'
          tox.env: py39-packaging

    pool:
      vmImage: $(imageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(python.version)

    - task: TwineAuthenticate@1
      displayName: 'Authenticate with Pypi'
      # condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
      inputs:
        # pythonUploadServiceConnection: ImageToScanConnectionPyPI
        pythonUploadServiceConnection: pypitest

    - script: python -m pip install --upgrade --quiet setuptools wheel twine
      displayName: install dependencies

    - script: python setup.py sdist bdist_wheel
      displayName: create wheel

    - publish: dist
      artifact: image-to-scan-wheel-$(imageName)-py$(python.version)
      displayName: publish artifact

    - script: python -m twine check "dist/*"
      displayName: check package

    - script: python -m twine upload -r pypitest --config-file $(PYPIRC_PATH) --skip-existing "dist/*"
      condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
      displayName: upload to pypi

  - job: pyinstaller
    strategy:
      matrix:
        linuxPackaging:
          imageName: 'ubuntu-latest'
          python.version: '3.9'
          tox.env: py39-packaging
        macPackaging:
          imageName: 'macOS-latest'
          python.version: '3.9'
          tox.env: py39-packaging
        windowsPackaging:
          imageName: 'windows-latest'
          python.version: '3.9'
          tox.env: py39-packaging
    pool:
      vmImage: $(imageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(python.version)

    - script: python -m pip install -r requirements/main.txt
      displayName: install requirements

    - script: python -m PyInstaller --name image-to-scan image_to_scan/app.py
      displayName: pyinstaller

    - publish: $(System.DefaultWorkingDirectory)/dist/image-to-scan
      # condition: and(
      #             succeeded(),
      #             eq(variables['Build.SourceBranch'], 'refs/heads/master')
      #            )
      artifact: image-to-scan-standalone-$(imageName)-py$(python.version)
      displayName: publish artifact

    - task: GithubRelease@0
      displayName: Create GitHub Release
      condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
      inputs:
        gitHubConnection: image-to-scan
        assets: $(System.DefaultWorkingDirectory)/dist/image-to-scan
